# Copyright (c) 2021-2022 Morwenn
# SPDX-License-Identifier: MIT

name: MacOS Builds

on:
  push:
    paths:
      - '.github/workflows/build-macos.yml'
      - 'CMakeLists.txt'
      - 'cmake/**'
      - 'examples/**'
      - 'include/**'
      - 'tests/**'
  pull_request:
    paths:
      - '.github/workflows/build-macos.yml'
      - 'CMakeLists.txt'
      - 'cmake/**'
      - 'examples/**'
      - 'include/**'
      - 'tests/**'

jobs:
  build:
    runs-on: macos-10.15

    strategy:
      fail-fast: false
      matrix:
        cxx:
          - g++-10
          - clang++
        config:
          # Release build
          - build_type: Release
          # Debug builds
          - build_type: Debug
            sanitize: address
          - build_type: Debug
            sanitize: undefined

    steps:
      - uses: actions/checkout@v3
      - uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install LLVM and Clang
        if: ${{matrix.cxx == 'clang++'}}
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "11.0"

      - name: Configure LLVM
        if: ${{matrix.cxx == 'clang++'}}
        run: |
          LLVM_PATH=${{ env.LLVM_PATH }}
          LLVM_VERSION=11
          echo "SDKROOT=$(xcrun --sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "CPATH=$LLVM_PATH/lib/clang/$LLVM_VERSION/include/" >> $GITHUB_ENV
          echo "LDFLAGS=-L$LLVM_PATH/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I$LLVM_PATH/include" >> $GITHUB_ENV
          echo "CC=$LLVM_PATH/bin/clang" >> $GITHUB_ENV
          echo "CXX=$LLVM_PATH/bin/clang++" >> $GITHUB_ENV

      - name: Configure GCC
        if: ${{matrix.cxx != 'clang++'}}
        run: echo "CXX=${{ matrix.cxx }}" >> $GITHUB_ENV

      - name: Configure CMake
        working-directory: ${{runner.workspace}}
        run: |
          cmake -H${{github.event.repository.name}} -Bbuild \
                -DCMAKE_CONFIGURATION_TYPES=${{matrix.config.build_type}} \
                -DCMAKE_BUILD_TYPE=${{matrix.config.build_type}} \
                -DCPPSORT_SANITIZE=${{matrix.config.sanitize}} \
                -GNinja \
                -DCPPSORT_BUILD_EXAMPLES=ON

      - name: Build the test suite
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{matrix.config.build_type}} -j 2

      - name: Run the test suite
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        working-directory: ${{runner.workspace}}/build
        run: ctest -C ${{matrix.config.build_type}} --no-tests=error
